<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interface name="interface2" label="New Python Interface" icon="MISC_python" help_url="">
    <script><![CDATA[# Houdini to Armory exporter test
import hou
from hou import hipFile
from hutil.Qt import QtWidgets
import json
import os

def armory_export():
    
    p = os.path.dirname(hipFile.path())
    n = hipFile.basename().split('.')[0]

    # Armory scene format
    # https://github.com/armory3d/iron/blob/master/Sources/iron/data/SceneFormat.hx
    raw = {}
    raw['name'] = n + '.json'
    
    raw['shader_datas'] = []
    raw['material_datas'] = []
    
    mat = {}
    raw['material_datas'].append(mat)
    mat['name'] = 'Material'
    mat['shader'] = 'Material_data.json/Material_data'
    mat['contexts'] = []
    c = {}
    mat['contexts'].append(c)
    c['name'] = 'mesh'
    c['bind_textures'] = []
    c['bind_constants'] = []
    
    raw['camera_datas'] = []
    cam = {}
    raw['camera_datas'].append(cam)
    cam['name'] = 'Camera'
    cam['near_plane'] = 0.1
    cam['far_plane'] = 100.0
    cam['fov'] = 0.935
    cam['frustum_culling'] = True
    cam['clear_color'] = [0.05, 0.05, 0.05, 1.0]
    
    raw['lamp_datas'] = []
    raw['mesh_datas'] = []
    
    raw['objects'] = []
    
    for object in hou.node("/obj").children():
        o = {}
        raw['objects'].append(o)
        
        d = {}
        raw['mesh_datas'].append(d)
        
        d['name'] = object.name() + '_data'
        d['vertex_arrays'] = []
        d['index_arrays'] = []
        va = {}
        va['attrib'] = 'pos'
        va['values'] = []
        d['vertex_arrays'].append(va)
        ia = {}
        ia['material'] = 0
        ia['values'] = []
        d['index_arrays'].append(ia)
        
        for point in object.displayNode().geometry().points():
            pos = point.position()
            va['values'].append(pos.x())
            va['values'].append(pos.y())
            va['values'].append(pos.z())
    
        for i in range(0, len(va['values']) / 3):
            ia['values'].append(i)
            
        o['name'] = object.name()
        o['type'] = 'mesh_object'
        o['data_ref'] = object.name() + '_data'
        o['material_refs'] = ['Material']
        
        t = {}
        t['values'] = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]
        o['transform'] = t
    
    cam = {}
    raw['objects'].append(cam)
    cam['name'] = 'Camera'
    cam['type'] = 'camera_object'
    cam['data_ref'] = 'Camera'
    cam['transform'] = {'values': [0.4100285768508911,-0.401742547750473,0.8188281059265137,12.2732515335083,0.9119762182235718,0.19364377856254578,-0.36166486144065857,-5.42092227935791,-0.013264819979667664,0.8950446844100952,0.44577914476394653,6.681694507598877,-0.0,0.0,-0.0,1.0]}
    cam['traits'] = []
    t = {}
    cam['traits'].append(t)
    t['type'] = 'Script'
    t['class_name'] = 'armory.trait.WalkNavigation'
    raw['camera_ref'] = 'Camera'
        
    fp_build = p + '/build_' + n
    
    if not os.path.exists(fp_build + '/compiled/Assets'):
        os.makedirs(fp_build + '/compiled/Assets')
    
    out_path = fp_build + '/compiled/Assets/' + n + '.json'
    with open(out_path, 'w') as f:
        f.write(json.dumps(raw, sort_keys=True, indent=4))
        
    # Write materials
    if not os.path.exists(fp_build + '/compiled/Shaders'):
        os.makedirs(fp_build + '/compiled/Shaders')
    
    m = {}
    m['shader_datas'] = []
    sd = {}
    m['shader_datas'].append(sd)
    sd['name'] = 'Material_data'
    sd['contexts'] = []
    c = {}
    sd['contexts'].append(c)
    c['name'] = 'mesh'
    c['compare_mode'] = 'less'
    c['cull_mode'] = 'clockwise'
    c['depth_write'] = True
    c['texture_units'] = []
    c['vertex_shader'] = 'Material_mesh.vert'
    c['fragment_shader'] = 'Material_mesh.frag'
    c['vertex_structure'] = [{'name': 'pos', 'size': 3}, {'name': 'nor', 'size': 3}]
    c['constants'] = [{'name': 'WVP', 'type': 'mat4', 'link': '_worldViewProjectionMatrix'}]
    
    out_path = fp_build + '/compiled/Assets/Material_data.json'
    with open(out_path, 'w') as f:
        f.write(json.dumps(m, sort_keys=True, indent=4))
       
    vs = """#version 450
in vec3 pos;
in vec3 nor;
uniform mat4 WVP;
void main() {
    vec4 spos = vec4(pos, 1.0);
    gl_Position = WVP * spos;
}
"""

    fs = """#version 450
out vec4 fragColor;
void main() {
    vec3 basecol = vec3(0.8, 0.8, 0.8);
    fragColor = vec4(basecol, 1.0);
}
"""

    out_path = fp_build + '/compiled/Shaders/Material_mesh.vert.glsl'
    with open(out_path, 'w') as f:
        f.write(vs)
        
    out_path = fp_build + '/compiled/Shaders/Material_mesh.frag.glsl'
    with open(out_path, 'w') as f:
        f.write(fs)
        
    # Write Main.hx
    if not os.path.exists(p + '/Sources'):
        os.makedirs(p + '/Sources')
    
    with open(p + '/Sources/Main.hx', 'w') as f:
        f.write("""
// Auto-generated
package ;
class Main {
    public static inline var projectName = 'untitled';
    public static inline var projectPackage = 'arm';
    public static function main() {
        if (armory.data.Config.raw == null) armory.data.Config.raw = { };
        var config = armory.data.Config.raw;
        if (config.window_mode == null) config.window_mode = 0;
        if (config.window_resizable == null) config.window_resizable = false;
        if (config.window_minimizable == null) config.window_minimizable = true;
        if (config.window_maximizable == null) config.window_maximizable = false;
        if (config.window_w == null) config.window_w = 960;
        if (config.window_h == null) config.window_h = 540;
        if (config.window_msaa == null) config.window_msaa = 1;
        if (config.window_vsync == null) config.window_vsync = true;
        var windowMode = config.window_mode == 0 ? kha.WindowMode.Window : (config.window_mode == 1 ? kha.WindowMode.BorderlessWindow : kha.WindowMode.Fullscreen);
        if (windowMode == kha.WindowMode.Fullscreen) { windowMode = kha.WindowMode.BorderlessWindow; config.window_w = kha.Display.width(0); config.window_h = kha.Display.height(0); }
        else { config.window_w = Std.int(Math.min(config.window_w, kha.Display.width(0))); config.window_h = Std.int(Math.min(config.window_h, kha.Display.height(0))); }
        armory.object.Uniforms.register();
        kha.System.init({title: projectName, width: config.window_w, height: config.window_h, samplesPerPixel: config.window_msaa, vSync: config.window_vsync, windowMode: windowMode, resizable: config.window_resizable, maximizable: config.window_maximizable, minimizable: config.window_minimizable}, function() {
            iron.App.init(function() {
                iron.Scene.setActive('""" + n + """.json', function(object:iron.object.Object) {
                    iron.RenderPath.setActive(armory.renderpath.RenderPathCreator.get());
                });
            });
        });
    }
}
""")
        
    # Write khafile.js
    with open(p + '/khafile.js', 'w') as f:
        f.write("""
// Auto-generated
let project = new Project('""" + n + """');
project.addSources('Sources');
project.addLibrary("../armsdk/armory");
project.addLibrary("../armsdk/iron");
project.addAssets("build_""" + n + """/compiled/Assets/**", { notinlist: true });
project.addShaders("build_""" + n + """/compiled/Shaders/**");
project.addDefine('rp_renderer=Forward');
project.addDefine('rp_background=Clear');
project.addDefine('rp_gi=Off');
project.addDefine('rp_ssgi=Off');
project.addDefine('arm_json');
project.addParameter('armory.trait.WalkNavigation');
project.addParameter("--macro keep('armory.trait.WalkNavigation')");
resolve(project);
""")

def onCreateInterface():

    root_widget = QtWidgets.QWidget()
    layout = QtWidgets.QVBoxLayout()
    
    button = QtWidgets.QPushButton("Armory Build")
    button.clicked.connect(armory_export)
    
    layout.addWidget(button)
    
    root_widget.setLayout(layout)
    return root_widget
]]></script>
    <includeInToolbarMenu menu_position="101" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
